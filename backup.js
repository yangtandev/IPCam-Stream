/* 
    Express.js & Node.js
*/
const { spawn } = require('child_process')
const fs = require('fs')

/* 
    Variables
*/
const config = {}
const mp4Commands = {}

/*
    Paths
*/
const pm2Path = `$HOME/.nvm/versions/node/v14.16.1/bin/pm2`
const backupPath = `./ZLMediaKit/release/linux/Debug/www`
const rtspListPath = `./ZLMediaKit/release/linux/Debug/www/rtsp-list/rtsp-list.json`
const ffmpeg = require('fluent-ffmpeg')
ffmpeg.setFfmpegPath(`./nvidia/ffmpeg/ffmpeg`)

/*
    Capture the MP4 stream generated by the Media Server and store it in the specified location.
*/
function RTSPToMP4(rtsp) {
    const { clientName } = config.allRtspConfig.find((rtspConfig) => rtspConfig.rtspList.includes(rtsp))
    const ip = rtsp.split('@').pop()
    const id = ip.match(/\d+/g)
    const input = `rtsp://localhost:9554/live/${ip}`
    const today = new Date(new Date().getTime() - new Date().getTimezoneOffset() * 60000)
        .toISOString()
        .replace(/\:+/g, '-')
        .slice(0, 10)
    const now = new Date(new Date().getTime() - new Date().getTimezoneOffset() * 60000)
        .toISOString()
        .slice(0, -5)
        .split('T')
        .join(' ')
    let output = backupPath

    for (let path of [clientName, 'backup', today, ip]) {
        output += `/${path}`
        if (!fs.existsSync(output)) {
            fs.mkdirSync(output)
        }
    }

    output += `/${now}.mp4`

    if (mp4Commands.hasOwnProperty(id)) {
        mp4Commands[id].kill('SIGINT')
    }

    mp4Commands[id] = ffmpeg(input)
    mp4Commands[id]
        .addInputOption('-rtsp_transport', 'tcp', '-re', '-ss', 0, '-t', 300)
        .addOutputOption('-avoid_negative_ts', 'make_zero', '-threads', 2)
        .videoCodec('h264_nvenc')
        .noAudio()
        .on('stderr', function (err) {
            if (
                err &&
                !err.includes('ffmpeg version') &&
                !err.includes('libavutil') &&
                !err.includes('libavcodec') &&
                !err.includes('libavformat') &&
                !err.includes('libavdevice') &&
                !err.includes('libavfilter') &&
                !err.includes('libswscale') &&
                !err.includes('libswresample') &&
                !err.includes('libpostproc') &&
                !err.includes('Duration') &&
                !err.includes('Stream #0') &&
                !err.includes('title') &&
                !err.includes('encoder') &&
                !err.includes('Side data') &&
                !err.includes('cpb') &&
                !err.includes('Last message repeated 1 times') &&
                !err.includes('VPS 0 does not exist') &&
                !err.includes('Non-monotonous DTS') &&
                !err.includes('Invalid DTS:') &&
                !err.includes('comment') &&
                !err.includes('Input #0') &&
                !err.includes('Output #0') &&
                !err.includes('Metadata') &&
                !err.includes('Stream mapping') &&
                !err.includes('Press [q] to stop') &&
                !err.includes('configuration') &&
                !err.includes('fps') &&
                !err.includes('gcc') &&
                !err.includes('located POCs unavailable') &&
                // !err.includes('Connection timed out') &&
                !err.includes('Streamed by ZLMediaKit')
            ) {
                if (ip == '220.130.65.35:8082') {
                    console.log('mp4 stderr', ip, err)
                }
            }
            if (err.includes('Error submitting video frame to the encoder')) {
                if (ip == '220.130.65.35:8082') {
                    console.log(ip, 'REBUILD')
                }
                RTSPToMP4(rtsp)
            }
        })
        .on('error', function (err, stdout, stderr) {
            if (ip == '220.130.65.35:8082') {
                console.log('mp4 error', ip, err.message)
            }
            if (
                err.message.includes('received signal 2') ||
                err.message.includes('Conversion failed') ||
                err.message.includes('Connection refused')
            ) {
                if (ip == '220.130.65.35:8082') {
                    console.log(ip, 'REBUILD')
                }
                RTSPToMP4(rtsp)
            }
        })
        .on('end', function (err, stdout, stderr) {
            if (ip == '220.130.65.35:8082') {
                console.log(ip, 'NEW')
            }
            RTSPToMP4(rtsp)
        })
        .save(output)
}

/*
    Set rtsp list related variables.
*/
function setRtspList() {
    const source = JSON.parse(fs.readFileSync(rtspListPath, 'utf8'))
    config.h264RtspConfig = source.h264RtspConfig
    config.hevcRtspConfig = source.hevcRtspConfig
    config.allRtspConfig = config.h264RtspConfig.concat(config.hevcRtspConfig)
    config.h264RtspList = config.h264RtspConfig
        .map((rtspConfig) => rtspConfig.rtspList)
        .reduce((prev, curr) => prev.concat(curr))
    config.hevcRtspList = config.hevcRtspConfig
        .map((rtspConfig) => rtspConfig.rtspList)
        .reduce((prev, curr) => prev.concat(curr))
    config.allRtspList = config.h264RtspList.concat(config.hevcRtspList)
}

/*
    Start the backup mechanism.
*/
function runBackup() {
    config.allRtspList.forEach((rtsp) => {
        RTSPToMP4(rtsp)
    })
}

/*
    Periodically clear backups that are one month overdue.
*/
function clearExpiredBackup() {
    const expireLimitDays = 30
    fs.readdir(backupPath, (err, dates) => {
        if (err) throw err

        dates.forEach((date) => {
            const currentDate = new Date(new Date().getTime() - new Date().getTimezoneOffset() * 60000)
                .toISOString()
                .replace(/\:+/g, '-')
                .slice(0, 10)
            let dateDiff = parseInt(Math.abs(new Date(currentDate) - new Date(date)) / 1000 / 60 / 60 / 24)

            if (dateDiff > expireLimitDays) fs.rmSync(`${backupPath}/${date}`, { recursive: true, force: true })
        })
    })
}

/*
    Pm2 reload command.
*/
function reloadPm2() {
    spawn(`${pm2Path} reload backup --force`, {
        shell: true,
    })
}

/*
    Run all necessary processes.
*/
// setRtspList()
// runBackup()
// clearExpiredBackup()
setInterval(
    (function backup() {
        setRtspList()
        runBackup()
        clearExpiredBackup()
        return backup
    })(),
    1000 * 60 * 5 // Capture stream fragments every five minutes.
)

/* 
    When the program terminates, clear the related background programs.
*/
// process.on('SIGINT', (code) => {
//     process.exit('SIGKILL')
//     //     String('SIGINT')
//     //         .split('')
//     //         .forEach((word) => {
//     //             const slashes = String('|').repeat(30)
//     //             console.log(`${slashes} ${word} ${slashes}`)
//     //         })
//     //     // spawn('killall -9 ffmpeg MediaServer', {
//     //     //     shell: true,
//     //     // })
//     //     if (config.allRtspList) {
//     //         config.allRtspList.forEach((rtsp) => {
//     //             const ip = rtsp.split('@').pop()
//     //             const id = ip.match(/\d+/g)
//     //             if (rtspCommands.hasOwnProperty(id)) {
//     //                 rtspCommands[id].kill()
//     //             }
//     //             // if (mp4Commands.hasOwnProperty(id)) {
//     //             //     mp4Commands[id].kill()
//     //             // }
//     //         })
//     //     }
// })
